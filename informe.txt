INFORME PRACTICA 2 ALGORITMOS
-----------------------------

******NOMBRES********
--------------------

Matías Alberto González Aliendre
Pablo Jesús Herrero Díaz
Tiago Da Costa Teixeira Veloso e Volta

ORDENACION POR INSERCION Y ORDENACION RAPIDA
--------------------------------------------

****INTRODUCCION*****
--------------------

En esta práctica de algoritmos, se implementan y comparan dos algoritmos de ordenación:
la ordenación por inserción y la ordenación rápida con selección aleatoria del pivote. 
El objetivo es analizar su eficencia al ordenar vectores de números enteros en tres casos 
diferentes: un vector ordenado ascendentemente, un vector ordenado descendentemente y un 
vector desordenado aleatoriamente.
Para cada caso, se miden y comparan los tiempos de ejecución de ambos algoritmos, permitiendo
así evaluar su eficiencia con diferentes conjuntos de datos.

****MAQUINA*******
------------------

Procesador: AMD Ryzen 5 4600H
Memoria: 16,0 GB
Modelo del Sistema: HP Pavilon Gaming Laptop 15-ec1xxx
Arquitectura: x86-64
Sistema Operativo: Ubuntu 22.04.5 LTS
Kernel: Linux 6.8.0-40-generic
Capacidad Disco: 408 Gb

UNIDADES DE TIEMPO UTILIZADAS
-----------------------------

En este informe los tiempos de ejecución de los algoritmos se midieron en microsegundos.
Para garantizar la precisión de las mediciones, se estableció un umbral de confianza de 
500 microsegundos. Si el tiempo de ejecución es menor a este valor el algoritmo se repite
k veces (k= 1000) y se obtiene el promedio dividiendo el tiempo total entre las ejecuciones. 
Los casos donde se aplicó este procedimiento están marcados con un asterisco en las tablas.

   ***** Test de Ordenación por inserción*****
   -------------------------------------------
Ordenacion por inserción con inicialización aleatoria
-15, -8, 5, -10, -5, -1, -5, -1, 4, -3, 2, 17, 17, 14, -7, -13, -4
ordenado? 0
ordenando...
-15, -13, -10, -8, -7, -5, -5, -4, -3, -1, -1, 2, 4, 5, 14, 17, 17
ordenado? 1

Ordenacion por inserción con inicialización descendente
17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1
ordenado? 0
ordenando...
1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17
ordenado? 1

Ordenacion por inserción con inicialización ascendente
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16
ordenado? 1
ordenando...
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16
ordenado? 1

  ***** Test por Ordenación rápida *****
  --------------------------------------

Ordenacion rapida auxiliar con inicialización aleatoria
-2, -11, -3, -11, 15, -9, -12, -8, 1, 8, 2, -3, -16, 16, -5, -11, 2
ordenado? 0
ordenando...
-16, -12, -11, -11, -11, -9, -8, -5, -3, -3, -2, 1, 2, 2, 8, 15, 16
ordenado? 1

Ordenacion rapida auxiliar con inicialización descendente
17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1
ordenado? 0
ordenando...
1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17
ordenado? 1

Ordenacion rapida auxiliar con inicialización ascendente
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16
ordenado? 1
ordenando...
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16
ordenado? 1



******TABLAS******
------------------	

Ordenación por inserción con inicialización ascendente

            n            t(n)          t(n)/n^0.8       t(n)/n^1.0          t(n)/n^1.2
*         500           4.8900          0.063100          0.018207            0.005253
*        1000           9.4810          0.075310          0.018917            0.004752
*        2000          10.9460          0.053522          0.011704            0.002559
*        4000          21.4280          0.064497          0.012278            0.002337
*        8000          43.1760          0.079998          0.013257            0.002197
*       16000          86.4760          0.098631          0.014229            0.002053
*       32000         177.2950          0.124478          0.015634            0.001964

Ordenación por inserción con inicialización descendente

            n            t(n)          t(n)/n^1.8       t(n)/n^2.0          t(n)/n^2.2
          500         593.0000          0.008221          0.002372            0.000684
         1000        2370.0000          0.009435          0.002370            0.000595
         2000        9415.0000          0.010764          0.002354            0.000515
         4000       37806.0000          0.012412          0.002363            0.000450
         8000      150548.0000          0.014194          0.002352            0.000390
        16000      602055.0000          0.016301          0.002352            0.000339
        32000     2421475.0000          0.018828          0.002365            0.000297

Ordenación por inserción con inicialización aleatorio

            n            t(n)          t(n)/n^1.8       t(n)/n^2.0          t(n)/n^2.2
*         500         311.6710          0.004321          0.001247            0.000360
         1000        1204.0000          0.004793          0.001204            0.000302
         2000        4655.0000          0.005322          0.001164            0.000254
         4000       19168.0000          0.006293          0.001198            0.000228
         8000       76901.0000          0.007251          0.001202            0.000199
        16000      298285.0000          0.008076          0.001165            0.000168
        32000     1208644.0000          0.009398          0.001180            0.000148

Ordenación rápida con inicialización ascendente

            n            t(n)          t(n)/n^1.0      t(n)/n^1.15          t(n)/n^1.3
*         500          14.8620          0.055336          0.015967            0.004607
*        1000          33.2470          0.066336          0.016663            0.004186
*        2000          73.4200          0.078503          0.017166            0.003754
*        4000         160.6820          0.092069          0.017527            0.003336
*        8000         348.3820          0.106973          0.017728            0.002938
        16000         732.0000          0.120449          0.017377            0.002507
        32000        1556.0000          0.137206          0.017232            0.002164

Ordenación rápida con inicialización descendente

            n            t(n)          t(n)/n^1.0      t(n)/n^1.15          t(n)/n^1.3
*         500          14.8960          0.055462          0.016003            0.004618
*        1000          33.2640          0.066370          0.016671            0.004188
*        2000          73.3390          0.078417          0.017148            0.003750
*        4000         160.3490          0.091878          0.017490            0.003330
*        8000         348.5460          0.107023          0.017736            0.002939
        16000         730.0000          0.120120          0.017330            0.002500
        32000        1571.0000          0.138529          0.017398            0.002185

Ordenación rápida con inicialización aleatoria

            n            t(n)          t(n)/n^1.0       t(n)/n^1.1          t(n)/n^1.3
*         500          65.7500          0.390162          0.102557            0.032483
*        1000         141.3130          0.473350          0.107197            0.029866
*        2000         302.8020          0.572544          0.111709            0.027378
         4000         574.0000          0.612650          0.102984            0.022202
         8000        1211.0000          0.729617          0.105665            0.020038
        16000        2559.0000          0.870305          0.108589            0.018114
        32000        5493.0000          1.054535          0.113358            0.016634
Algoritmo fibonacci 1

            n            t(n)          t(n)/1.1^n   t(n)/((1+sqrt(5))/2)^n   t(n)/2^n



1.1^n es la cota subestimada
(1+sqrt(5))/2)^n es la cota ajustada y la Cte = 
2^n es la cota sobreestimada


Algoritmo fibonacci 2

           n             t(n)          t(n)/n^0.8          t(n)/n         t(n)/n*log(n)



n^0.8 es la cota subestimada
n es la cota ajustada y la Cte = 
n*log(n) es la cota sobreestimada


Algoritmo fibonacci 3

           n             t(n)      t(n)/sqrt(log(n))     t(n)/log(n)        t(n)/n^0,5


sqrt(log(n)) es la cota subestimada
log(n) es la cota ajustada y la Cte = 
n^0,5 es la cota sobreestimada


****CONCLUSIONES****
--------------------
