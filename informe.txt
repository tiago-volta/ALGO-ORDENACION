INFORME PRACTICA 2 ALGORITMOS
-----------------------------

******NOMBRES********
--------------------

Matías Alberto González Aliendre
Pablo Jesús Herrero Díaz
Tiago Da Costa Teixeira Veloso e Volta


ORDENACION POR INSERCION Y ORDENACION RAPIDA
--------------------------------------------

****INTRODUCCION*****
--------------------

En esta práctica de algoritmos, se implementan y comparan dos algoritmos de ordenación:
la ordenación por inserción y la ordenación rápida con selección aleatoria del pivote.
El objetivo es analizar su eficencia al ordenar vectores de números enteros en tres casos
diferentes: un vector ordenado ascendentemente, un vector ordenado descendentemente y un
vector desordenado aleatoriamente.
Para cada caso, se miden y comparan los tiempos de ejecución de ambos algoritmos, permitiendo
así evaluar su eficiencia con diferentes conjuntos de datos.

****MAQUINA*******
------------------

Procesador: 11th Gen Intel(R) Core(TM) i9-11900H @ 2.50GHz
Memoria: 16,0 GB
Modelo del Sistema: ASUSTeK COMPUTER INC. Vivobook_ASUSLaptop K6502HC_K6502HC
Arquitectura: x86_64
Sistema Operativo: Ubuntu 24.04.1 LTS
Kernel: Linux 6.8.0-45-generic
Capacidad Disco: 512 Gb

UNIDADES DE TIEMPO UTILIZADAS
-----------------------------

En este informe todos los tiempos de ejecución de los algoritmos se midieron en microssegundos (μs).
Para garantizar la precisión de las mediciones, se estableció un umbral de confianza de
500 microsegundos. Si el tiempo de ejecución es menor a este valor el algoritmo se repite
k veces (k= 1000) y se obtiene el promedio dividiendo el tiempo total entre las ejecuciones.
Los casos donde se aplicó este procedimiento están marcados con un asterisco en las tablas.


   ***** Test de Ordenación por inserción*****
   -------------------------------------------
Ordenacion por inserción con inicialización aleatoria
-15, -8, 5, -10, -5, -1, -5, -1, 4, -3, 2, 17, 17, 14, -7, -13, -4
ordenado? 0
ordenando...
-15, -13, -10, -8, -7, -5, -5, -4, -3, -1, -1, 2, 4, 5, 14, 17, 17
ordenado? 1

Ordenacion por inserción con inicialización descendente
17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1
ordenado? 0
ordenando...
1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17
ordenado? 1

Ordenacion por inserción con inicialización ascendente
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16
ordenado? 1
ordenando...
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16
ordenado? 1


  ***** Test por Ordenación rápida *****
  --------------------------------------

Ordenacion rapida auxiliar con inicialización aleatoria
-2, -11, -3, -11, 15, -9, -12, -8, 1, 8, 2, -3, -16, 16, -5, -11, 2
ordenado? 0
ordenando...
-16, -12, -11, -11, -11, -9, -8, -5, -3, -3, -2, 1, 2, 2, 8, 15, 16
ordenado? 1

Ordenacion rapida auxiliar con inicialización descendente
17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1
ordenado? 0
ordenando...
1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17
ordenado? 1

Ordenacion rapida auxiliar con inicialización ascendente
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16
ordenado? 1
ordenando...
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16
ordenado? 1


******TABLAS******
------------------

Ordenación por inserción con inicialización ascendente

            n            t(n)         t(n)/n^0.78       t(n)/n^0.98         t(n)/n^1.18
*         500           1.1920          0.009356         0.0026995           0.0007789
*        1000           2.4040          0.010988         0.0027602           0.0006933
*        2000           4.7200          0.012564         0.0027475           0.0006008
*        4000           9.2580          0.014352         0.0027321           0.0005201
*        8000          18.2620          0.016487         0.0027322           0.0004528
*       16000          35.4190          0.018622         0.0026866           0.0003876
*       32000          69.6250          0.021318         0.0026774           0.0003363


n^0.78 es la cota subestimada
n^0.98 es la cota ajustada y la Cte = 0.0027
n^1.18 es la cota sobreestimada

Ordenación por inserción con inicialización descendente

            n            t(n)         t(n)/n^1.8        t(n)/n^2.0          t(n)/n^2.2
*         500         229.1240          0.003176         0.0009165           0.0002644
         1000         905.0000          0.003603         0.0009050           0.0002273
         2000        3612.0000          0.004129         0.0009030           0.0001975
         4000       14443.0000          0.004742         0.0009027           0.0001718
         8000       58024.0000          0.005471         0.0009066           0.0001502
        16000      235107.0000          0.006366         0.0009184           0.0001325
        32000      926328.0000          0.007203         0.0009046           0.0001136

n^1.8 es la cota subestimada
n^2.0 es la cota ajustada y la Cte = 0.00091
n^2.2 es la cota sobreestimada

Ordenación por inserción con inicialización aleatoria

            n            t(n)         t(n)/n^1.79       t(n)/n^1.99         t(n)/n^2.19
*         500         118.9970          0.001755         0.0005065           0.0001461
*        1000         463.6930          0.001978         0.0004969           0.0001248
         2000        1849.0000          0.002281         0.0004988           0.0001091
         4000        7306.0000          0.002606         0.0004961           0.0000944
         8000       28852.0000          0.002976         0.0004932           0.0000817
        16000      117667.0000          0.003510         0.0005064           0.0000731
        32000      466197.0000          0.004021         0.0005050           0.0000634


n^1.79 es la cota subestimada
n^1.99 es la cota ajustada y la Cte = 0.0005
n^2.19 es la cota sobreestimada


Ordenación rápida con inicialización ascendente

            n            t(n)         t(n)/n^0.94       t(n)/n^1.14         t(n)/n^1.34
*         500           7.0400          0.020443         0.0058986           0.0017020
*        1000          15.8120          0.023932         0.0060116           0.0015100
*        2000          35.2760          0.027830         0.0060856           0.0013308
*        4000          77.7860          0.031986         0.0060891           0.0011592
*        8000         169.5700          0.036345         0.0060232           0.0009982
*       16000         366.5410          0.040950         0.0059078           0.0008523
        32000         792.0000          0.046119         0.0057923           0.0007275

n^0.94 es la cota subestimada
n^1.14 es la cota ajustada y la Cte = 0.0059
n^1.34 es la cota sobreestimada

Ordenación rápida con inicialización descendente

            n            t(n)         t(n)/n^0.94       t(n)/n^1.14         t(n)/n^1.34
*         500           6.8130          0.019784         0.0057084           0.0016471
*        1000          15.6560          0.023696         0.0059522           0.0014951
*        2000          35.0900          0.027683         0.0060535           0.0013237
*        4000          77.2180          0.031753         0.0060446           0.0011507
*        8000         168.4870          0.036113         0.0059847           0.0009918
*       16000         362.4100          0.040488         0.0058412           0.0008427
        32000         803.0000          0.046760         0.0058728           0.0007376

n^0.94 es la cota subestimada
n^1.14 es la cota ajustada y la Cte = 0.0059
n^1.34 es la cota sobreestimada

Ordenación rápida con inicialización aleatoria


            n            t(n)         t(n)/n^0.9        t(n)/n^1.1          t(n)/n^1.3
*         500          28.1830          0.011704         0.0066484           0.0009744
*        1000          62.5760          0.012528         0.0066818           0.0007905
*        2000         136.3480          0.013295         0.0066572           0.0006357
*        4000         293.1130          0.014036         0.0065986           0.0005086
         8000         615.0000          0.014564         0.0064286           0.0004000
        16000        1294.0000          0.015246         0.0063181           0.0003173
        32000        2813.0000          0.016574         0.0064486           0.0002614


n^0.9 es la cota subestimada
n^1.1 es la cota ajustada y la Cte = 0.03
n^1.3 es la cota sobreestimada


****CONCLUSIONES****
--------------------

Basándonos en los datos y los tiempos obtenidos de las pruebas efectuadas, podemos concluir que:

El algoritmo de inserción, es sencillo de implementar y tiene un rendimiento aceptable en vectores pequeños
o que ya están parcialmente ordenados, pero se degrada rápidamente en rendimiento cuando se enfrenta a vectores
más grandes o que están totalmente desordenados.

El algoritmo de ordenación rápida, por otro lado, no tiene una implementación tan sencilla, pero mostró una mayor
 eficiencia general y un rendimiento más estable en todas las configuraciones de datos, sobretodo en vectores de
 gran tamaño, destacándose especialmente en la ordenación aleatória.

Las cotas de ambos algoritmos muestran un comportamiento coherente y esperado en todas sus configuraciones.
La cota subestimada crece de forma constante, la cota sobrestimada decrece de forma constante, y la cota ajustada
se mantiene durante todas las mediciones.


Además como comprobación también podemos compararlas con las complejidades teóricas de los algoritmos.

- Ordenación por Inserción con inicialización ascendente
La cota empírica de O(n^0.98) es muy cercana a O(n) (la cota esperada),
dado que el algoritmo de inserción funciona mejor con datos ordenados.

- Ordenación por Inserción con inicialización descendente
La cota empírica coincide exactamente con el peor caso teórico del algoritmo O(n^2),
lo cual es esperado en este caso, dado que cada nuevo elemento debe ser comparado
y movido a su posición correcta.

- Ordenación por Inserción con inicialización aleatoria
La cota empírica de O(n1.99)O(n1.99) es también consistente con el peor caso teórico.
Esto indica que, aunque la lista está desordenada, el rendimiento se aproxima a la complejidad cuadrática.
Esto es típico en listas aleatorias, donde el comportamiento puede variar, pero en promedio se mantiene en el orden cuadrático.

- Ordenación rápida con inicialización ascendente
La cota empírica de O(n1.14)O(n1.14) es un poco más alta que O(n)O(n), pero no llega a O(nlogn).
Esto indica un buen rendimiento, aunque no óptimo, en listas ya ordenadas. Esto puede suceder si la implementación de Quicksort elige pivotes de forma menos eficiente en el caso de listas ordenadas.

- Ordenación rápida con inicialización descendente
Al igual que el caso anterior, la cota empírica de O(n1.14)O(n1.14) sugiere un rendimiento aceptable, pero no óptimo.
Es interesante notar que, a pesar de la inicialización descendente, el rendimiento sigue siendo consistente,
lo que podría indicar que la selección de pivotes está minimizando el impacto del orden inverso en el rendimiento.

- Ordenación rápida con inicialización aleatoria

La cota empírica de O(n1.1)O(n1.1) es un poco más alta que O(n)O(n) y aún por debajo de O(nlogn).
Esto es un buen resultado, ya que indica que la implementación del algoritmo es efectiva para datos aleatorios y está funcionando mejor que en el peor caso, pero aún no alcanza la eficiencia óptima teórica.






