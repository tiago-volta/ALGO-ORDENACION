INFORME PRACTICA 2 ALGORITMOS
-----------------------------

******NOMBRES********
--------------------

Matías Alberto González Aliendre
Pablo Jesús Herrero Díaz
Tiago Da Costa Teixeira Veloso e Volta

ORDENACION POR INSERCION Y ORDENACION RAPIDA
--------------------------------------------

****INTRODUCCION*****
--------------------

En esta práctica de algoritmos, se implementan y comparan dos algoritmos de ordenación:
la ordenación por inserción y la ordenación rápida con selección aleatoria del pivote. 
El objetivo es analizar su eficencia al ordenar vectores de números enteros en tres casos 
diferentes: un vector ordenado ascendentemente, un vector ordenado descendentemente y un 
vector desordenado aleatoriamente.
Para cada caso, se miden y comparan los tiempos de ejecución de ambos algoritmos, permitiendo
así evaluar su eficiencia con diferentes conjuntos de datos.

****MAQUINA*******
------------------

Procesador: AMD Ryzen 5 4600H
Memoria: 16,0 GB
Modelo del Sistema: HP Pavilon Gaming Laptop 15-ec1xxx
Arquitectura: x86-64
Sistema Operativo: Ubuntu 22.04.5 LTS
Kernel: Linux 6.8.0-40-generic
Capacidad Disco: 408 Gb

UNIDADES DE TIEMPO UTILIZADAS
-----------------------------

En este informe los tiempos de ejecución de los algoritmos se midieron en microsegundos.
Para garantizar la precisión de las mediciones, se estableció un umbral de confianza de 
500 microsegundos. Si el tiempo de ejecución es menor a este valor el algoritmo se repite
k veces (k= 1000) y se obtiene el promedio dividiendo el tiempo total entre las ejecuciones. 
Los casos donde se aplicó este procedimiento están marcados con un asterisco en las tablas.

   ***** Test Ordenación por inserción*****
   ----------------------------------------
Ordenacion por inserción con inicializacion aleatoria
-15, -8, 5, -10, -5, -1, -5, -1, 4, -3, 2, 17, 17, 14, -7, -13, -4
ordenado? 0
ordenando...
-15, -13, -10, -8, -7, -5, -5, -4, -3, -1, -1, 2, 4, 5, 14, 17, 17
ordenado? 1

Ordenacion por inserción con inicializacion descendente
17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1
ordenado? 0
ordenando...
1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17
ordenado? 1

Ordenacion por inserción con inicializacion ascendente
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16
ordenado? 1
ordenando...
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16
ordenado? 1

  ***** Test por Ordenación rápida *****
  --------------------------------------

Ordenacion rapida auxiliar con inicializacion aleatoria
-2, -11, -3, -11, 15, -9, -12, -8, 1, 8, 2, -3, -16, 16, -5, -11, 2
ordenado? 0
ordenando...
-16, -12, -11, -11, -11, -9, -8, -5, -3, -3, -2, 1, 2, 2, 8, 15, 16
ordenado? 1

Ordenacion rapida auxiliar con inicializacion descendente
17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1
ordenado? 0
ordenando...
1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17
ordenado? 1

Ordenacion rapida auxiliar con inicializacion ascendente
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16
ordenado? 1
ordenando...
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16
ordenado? 1



******TABLAS******
------------------	


Algoritmo fibonacci 1

            n            t(n)          t(n)/1.1^n   t(n)/((1+sqrt(5))/2)^n   t(n)/2^n



1.1^n es la cota subestimada
(1+sqrt(5))/2)^n es la cota ajustada y la Cte = 
2^n es la cota sobreestimada


Algoritmo fibonacci 2

           n             t(n)          t(n)/n^0.8          t(n)/n         t(n)/n*log(n)



n^0.8 es la cota subestimada
n es la cota ajustada y la Cte = 
n*log(n) es la cota sobreestimada


Algoritmo fibonacci 3

           n             t(n)      t(n)/sqrt(log(n))     t(n)/log(n)        t(n)/n^0,5


sqrt(log(n)) es la cota subestimada
log(n) es la cota ajustada y la Cte = 
n^0,5 es la cota sobreestimada


****CONCLUSIONES****
--------------------
